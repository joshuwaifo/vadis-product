**Objective:**
Now, we have to build a multi-role platform. Implement user authentication (signup/login) using **Replit DB** and Drizzle ORM. Users will select a role upon signup, leading to distinct dashboards and features for "Production Company," "Brand/Agency," "Financier (Investor)," and "Individual Creator."

**Design Language:**
*   Adhere strictly to the visual style of our homepage but you also have design controls.
*   All new pages, modals, and components should feel like a natural extension of this design.
*   Utilize Shadcn UI components where appropriate, styled to match.

**I. User Authentication & Role Selection (Replit DB & Drizzle ORM):**

1.  **Schema (`shared/schema.ts`):**
    *   Create/Update `users` table:
        *   `id` (serial, pk)
        *   `email` (text, notNull, unique)
        *   `passwordHash` (text, notNull)
        *   `role` (text enum: 'PRODUCTION', 'BRAND_AGENCY', 'INVESTOR', 'INDIVIDUAL_CREATOR', notNull)
        *   `roleSpecificDetails` (jsonb, nullable - for storing specific signup info)
        *   `createdAt`, `updatedAt`
    *   Update `drizzle.config.ts` and run `npm run db:push`.

2.  **Homepage Interaction:**
    *   The "Sign Up Now ->" button on the homepage should navigate to a new `/signup` page.
    *   The "Login" button in the homepage header should navigate to a new `/login` page.

3.  **Sign-up Flow (`/signup` page):**
    *   **Step 1: Role Selection.** Present four distinct clickable cards/options (styled like the "Select your role" section on the homepage) for:
        *   Production Company
        *   Brand/Agency
        *   Financier (Investor)
        *   Individual Creator
    *   **Step 2: Role-Specific Forms.** Upon selecting a role, present a tailored sign-up form:
        *   **Common fields for all roles:** Email, Password, Confirm Password.
        *   **Production Company:** + Company Name, Contact Person, Company Website (optional).
        *   **Brand/Agency:** + Brand/Agency Name, Contact Person, Company Website (optional).
        *   **Financier (Investor):** + Full Name or Company Name, Investment Type (Dropdown: "ROI-based Equity", "Loan-based Debt"), Structure (Dropdown: "Individual", "Team/Fund").
        *   **Individual Creator:** + Full Name/Creator Name, Primary Content Platform Link (e.g., YouTube channel).
    *   **Backend:**
        *   Validate inputs. Hash password.
        *   Store user in Replit DB with the selected `role` and relevant `roleSpecificDetails`.
        *   On success, log the user in and redirect to their role-specific dashboard.

4.  **Login Flow (`/login` page):**
    *   Simple form: Email, Password.
    *   **Backend:** Validate credentials against Replit DB.
    *   On success, redirect to the user's role-specific dashboard.
    *   Implement basic session management (e.g., using cookies or a simple server-side session store if Replit supports it easily, otherwise JWT in cookies).

**II. Role-Specific Dashboards & Features (New Pages & Components):**

*   **General:** After login, implement a consistent top navigation bar (dark theme, matches homepage header) with links relevant to the role and a User Profile/Logout dropdown.

1.  **Production Company Dashboard (`/production/dashboard`):**
    *   **UI:** Clean, professional.
    *   **Features:**
        *   List of "My Projects" (fetched from a new `projects` table in Replit DB). Each project item should be clickable to view/edit.
        *   Button: "Start New Project".
    *   **Start New Project Flow:**
        *   Form: Project Title, Logline, Target Genre(s), Brief Synopsis.
        *   On submit, creates a new project record linked to the user.
        *   User is then presented with two options:
            *   **"Generate Script with AI":** Navigates to a new `/production/projects/:id/script-writer` page.
                *   UI: Form for detailed script generation prompts (premise, characters, tone, desired length/act structure).
                *   Backend: Integrate with an AI text generation model (placeholder for now, just simulate and save generated text to the project's script field).
            *   **"Upload Existing Script":** Navigates to `/production/projects/:id/script-upload`.
                *   UI: File input for `.txt`, `.docx`, `.rtf`, `.pdf`.
                *   Backend: Basic parser for `.txt`. For other formats, implement simple text extraction or indicate placeholder for more complex parsing. Save extracted text to the project.
    *   **Project Analysis View (`/production/projects/:id/analysis` - This is a major new page with sub-sections):**
        *   Display uploaded/generated script text.
        *   Tabs/Sections for:
            *   **Casting Suggestions (Placeholder):** UI to list characters (manually entered or placeholder AI extracted). UI to manually assign/note actor ideas. (Full AI actor suggestion from a DB can be a later feature).
            *   **Brand Product Placement (Placeholder):** UI to manually identify scenes for placement. UI to *notionally* select products (this implies a Product Database visible to Production, which Brands will populate. For now, this can be a placeholder or use a few seed products).
            *   **Location Incentives (Placeholder):** UI to note target locations and research incentives.
            *   **VFX Breakdown (Placeholder):** Text area to note VFX needs per scene.
            *   **Project Summary (New Component):** Collate all project info.
            *   **Financial Summary (New Component):** Basic budget template/input fields. (AI financial analysis is a later feature).
    *   **Marketplace Publishing:** A button "Publish to Marketplace" on the Project Analysis View (marks project as visible to Investors/Brands).

2.  **Brand/Agency Dashboard (`/brand/dashboard`):**
    *   **UI:** Focus on product management.
    *   **Product Database (New `products` table in Replit DB):**
        *   Schema: `id`, `brandUserId` (FK to users), `productName`, `companyName`, `category`, `imageUrl`, `description`, `placementCriteria`.
        *   CRUD UI for **their own** products (list, add, edit, delete). Ensure data is scoped to the logged-in brand user.
    *   **Marketplace View (`/brand/marketplace`):**
        *   List of projects published by Production Companies.
        *   Filter/search projects (e.g., by genre, keywords relevant to their products).
        *   For each project: View Project Summary (read-only). Placeholder for AI-generated brand integration visuals.
        *   Interaction:
            *   Button: "Express Interest" (logs this interaction for admin to see - simple DB entry for now).
            *   Button: "Not Interested".

3.  **Financier (Investor) Dashboard (`/investor/dashboard`):**
    *   **UI:** Professional, data-focused.
    *   **Profile Management (`/investor/profile` - New `investor_profiles` table):**
        *   Schema: `id`, `userId` (FK to users), `investmentType` (from signup), `structure` (from signup), `preferredGenres` (JSONB array), `minInvestment` (int), `maxInvestment` (int), `otherCriteria` (text).
        *   Form to manage their profile and investment preferences.
    *   **Marketplace View (`/investor/marketplace`):**
        *   List of projects published by Production Companies.
        *   Filter/search projects based on their profile preferences.
        *   For each project: View Project Summary and Financial Summary (read-only).
        *   Interaction:
            *   Button: "Indicate Interest to Invest" (logs interaction for admin).

4.  **Individual Creator Dashboard (`/creator/dashboard`):**
    *   **UI:** Simple, focused on scriptwriting.
    *   **Features:**
        *   Primary access to a "Script Generation with AI" tool (similar to Production's, but perhaps simpler, saves to their own private project list).
        *   List of their generated scripts/projects.

**III. Backend (Server-side - `server/routes.ts`, `server/storage.ts`):**
*   Create new API endpoints for all CRUD operations related to new tables (projects, products scoped to brand, investor profiles).
*   Implement authentication routes (`/api/auth/signup`, `/api/auth/login`, `/api/auth/logout`).
*   Ensure all data-access endpoints are protected and scoped by user role where necessary.

**IV. General Technical Stack:**
*   Frontend: React, TypeScript, Vite, Wouter, TailwindCSS, Shadcn UI.
*   Backend: Node.js, Express, TypeScript.
*   Database: Replit DB with Drizzle ORM.

**Initial Focus:**
Get the signup/login flow working for all roles, and create the basic dashboard structure for each. Then, iteratively build out the core features for each role, starting with Production.
